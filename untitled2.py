# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jotRgLDn8SqesTfO3LpL9mXdyImXm_S6
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
import joblib  # For saving model

# Load your training data
df = pd.read_csv('/content/adapter_info.csv')

# Convert categorical to numeric if needed
df['Recycling_Symbol'] = df['Recycling_Symbol'].map({'Yes': 1, 'No': 0})
df['Material_Code'] = df['Material_Code'].map({'PP': 1, 'ABS': 0})
df['Is_Recyclable'] = df['Is_Recyclable'].map({'Yes': 1, 'No': 0})

# Select features and target
X = df[['Power_Wattage', 'Recycling_Symbol', 'Material_Code']]
y = df['Is_Recyclable']

# Train model
model = RandomForestClassifier()
model.fit(X, y)

# Save model
joblib.dump(model, 'recyclable_model.pkl')

# Load model
model = joblib.load('recyclable_model.pkl')

# Example new data
new_data = pd.DataFrame([{
    'Power_Wattage': 65,
    'Recycling_Symbol': 1,
    'Material_Code': 1
}])

# Predict
prediction = model.predict(new_data)
print("Is Recyclable:" , "Yes" if prediction[0] == 1 else "No")

!pip install pytesseract opencv-python pillow joblib
!apt-get install -y tesseract-ocr

import pytesseract
from PIL import Image
import cv2
import re
import random
import pandas as pd
import joblib
from google.colab import files

uploaded = files.upload()  # Upload image manually in Colab
image_path = list(uploaded.keys())[0]

def extract_text_from_image(image_path):
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    text = pytesseract.image_to_string(gray)
    return text

def parse_attributes(text):
    def extract(pattern, fallback):
        match = re.search(pattern, text)
        return match.group(1).strip() if match else fallback

    power = extract(r'(\d{2,3})W', str(random.choice([10, 20, 65, 150])))
    material = 1 if "PP" in text else (0 if "ABS" in text else random.choice([0, 1]))
    recycle = 1 if "recycle" in text.lower() or "â™»" in text else 0

    return {
        'Power_Wattage': float(power),
        'Material_Code': material,
        'Recycling_Symbol': recycle
    }

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# Sample training data
data = [
    {"Power_Wattage": 150, "Recycling_Symbol": 0, "Material_Code": 0, "Is_Recyclable": 0},
    {"Power_Wattage": 20, "Recycling_Symbol": 0, "Material_Code": 0, "Is_Recyclable": 0},
    {"Power_Wattage": 10, "Recycling_Symbol": 1, "Material_Code": 1, "Is_Recyclable": 1},
    {"Power_Wattage": 65, "Recycling_Symbol": 1, "Material_Code": 1, "Is_Recyclable": 1},
    {"Power_Wattage": 65, "Recycling_Symbol": 0, "Material_Code": 0, "Is_Recyclable": 0},
    {"Power_Wattage": 20, "Recycling_Symbol": 0, "Material_Code": 0, "Is_Recyclable": 0},
    {"Power_Wattage": 10, "Recycling_Symbol": 1, "Material_Code": 1, "Is_Recyclable": 1}
]

df = pd.DataFrame(data)
X = df[["Power_Wattage", "Recycling_Symbol", "Material_Code"]]
y = df["Is_Recyclable"]

model = RandomForestClassifier()
model.fit(X, y)

# Save model
joblib.dump(model, "recyclable_model.pkl")

model = joblib.load("recyclable_model.pkl")

def predict_recyclability(attributes):
    # Enforce correct order and column names
    feature_names = ["Power_Wattage", "Recycling_Symbol", "Material_Code"]
    df = pd.DataFrame([[attributes["Power_Wattage"],
                        attributes["Recycling_Symbol"],
                        attributes["Material_Code"]]],
                      columns=feature_names)

    prediction = model.predict(df)
    return "Can be Recycled" if prediction[0] == 1 else "Not Recyclable"

def image_to_recyclability_prediction(image_path):
    text = extract_text_from_image(image_path)
    attributes = parse_attributes(text)
    result = predict_recyclability(attributes)
    #print("Extracted Text:\n", text)
    #print("Parsed Attributes:", attributes)
    #print("Is Recyclable:", result)
    return result

image_to_recyclability_prediction(image_path)